{
    "$string": {
        "آرگومان‌ها": "arg[, prettify]",
        "توضیحات": "پارامتر arg را با استفاده از قوانین تبدیل زیر به یک رشته تبدیل می‌کند:\n\n - رشته‌ها بدون تغییر باقی می‌مانند\n - توابع به یک رشته خالی تبدیل می‌شوند\n - بی‌نهایت عددی و NaN خطا می‌دهند زیرا نمی‌توانند به عنوان عدد JSON نمایش داده شوند\n - سایر مقادیر با استفاده از تابع JSON.stringify به یک رشته JSON تبدیل می‌شوند. اگر prettify درست باشد، آنگاه JSON زیبا تولید می‌شود. به عبارت دیگر، یک خط برای هر فیلد و خطوط بر اساس عمق فیلد باید برجسته شوند."
    },
    "$length": {
        "آرگومان‌ها": "str",
        "توضیحات": "تعداد کاراکترهای رشته str را برمی‌گرداند. اگر str یک رشته نباشد، یک خطا ایجاد می‌شود."
    },
    "$substring": {
        "آرگومان‌ها": "str, start[, length]",
        "توضیحات": "یک رشته حاوی کاراکترهای پارامتر اول str از جایگاه start (صفر-مبنا) به عقب برمی‌گرداند. اگر length مشخص شود، زیررشته حداکثر length کاراکتر داشته باشد. اگر start منفی باشد، این نشان می‌دهد که تعداد کاراکترها از انتهای str باید محاسبه شود."
    },
    "$substringBefore": {
        "آرگومان‌ها": "str, chars",
        "توضیحات": "زیررشته‌ای را قبل از اولین وقوع دنباله کاراکتر chars در str برمی‌گرداند. اگر str شامل chars نباشد، آنگاه str را برمی‌گرداند."
    },
    "$substringAfter": {
        "آرگومان‌ها": "str, chars",
        "توضیحات": "زیررشته‌ای را بعد از اولین وقوع دنباله کاراکتر chars در str برمی‌گرداند. اگر str شامل chars نباشد، آنگاه str را برمی‌گرداند."
    },
    "$uppercase": {
        "آرگومان‌ها": "str",
        "توضیحات": "یک رشته با تمامی کاراکترهای str تبدیل به حروف بزرگ باز می‌گرداند."
    },
    "$lowercase": {
        "آرگومان‌ها": "str",
        "توضیحات": "یک رشته با تمامی کاراکترهای str تبدیل به حروف کوچک باز می‌گرداند."
    },
    "$trim": {
        "آرگومان‌ها": "str",
        "توضیحات": "تمامی کاراکترهای فاصله در str را نرمال کرده و حذف می‌کند با اجرای مراحل زیر:\n\n - تبدیل تمام تب‌ها، برگشت‌های خط و خطوط به فاصله‌ها\n- تقلیل دنباله‌های پیوسته از فاصله به یک فاصله تنها\n- حذف فاصله‌های پایانی و ابتدایی\n\n اگر str مشخص نشود (یعنی این تابع بدون آرگومان فراخوانی شود)، آنگاه مقدار متغیر متنی به عنوان مقدار str استفاده می‌شود. اگر str یک رشته نباشد، یک خطا ایجاد می‌شود."
    },
    "$contains": {
        "آرگومان‌ها": "str, pattern",
        "توضیحات": "اگر str با pattern مطابقت داشته باشد، true را برمی‌گرداند؛ در غیر این صورت false را برمی‌گرداند. اگر str مشخص نشود (یعنی این تابع با یک آرگومان فراخوانی شود)، آنگاه مقدار متغیر متنی به عنوان مقدار str استفاده می‌شود. پارامتر pattern می‌تواند یک رشته یا یک عبارت منظم باشد."
    },
    "$split": {
        "آرگومان‌ها": "str[, separator][, limit]",
        "توضیحات": "پارامتر str را به یک آرایه از زیررشته‌ها تقسیم می‌کند. اگر str یک رشته نباشد، این یک خطاست. پارامتر اختیاری separator مشخص می‌کند که کاراکترهایی در str که به عنوان یک رشته یا عبارت منظم تقسیم شوند. اگر separator مشخص نشود، آنگاه فاصله خالی در نظر گرفته می‌شود و str به یک آرایه از کاراکترهای تکی تقسیم می‌شود. اگر separator یک رشته نباشد، این یک خطاست. پارامتر اختیاری limit یک عدد است که تعداد حداکثر زیررشته‌ها را در آرایه نتیجه مشخص می‌کند. هر زیررشته اضافی حذف می‌شود. اگر limit مشخص نشود، str به صورت کامل تقسیم می‌شود و محدودیتی برای اندازه آرایه نتیجه وجود ندارد. اگر limit یک عدد غیرمنفی نباشد، این یک خطاست."
    },
    "$join": {
        "آرگومان‌ها": "array[, separator]",
        "توضیحات": "یک آرایه از رشته‌های مؤلفه را به یک رشته ترکیب شده تکی با استفاده از پارامتر اختیاری separator جدا کرده و برمی‌گرداند. اگر ورودی array شامل موردی باشد که یک رشته نباشد، این یک خطاست. اگر separator مشخص نشود، آنگاه فاصله خالی در نظر گرفته می‌شود، به عبارت دیگر، هیچ فاصله‌ای بین رشته‌های مؤلفه وجود ندارد. اگر separator یک رشته نباشد، این یک خطاست."
    },
    "$match": {
        "آرگومان‌ها": "str, pattern [, limit]",
        "توضیحات": "رشته str را به عبارت منظم pattern اعمال کرده و یک آرایه از اشیاء را برمی‌گرداند، به طوری که هر شیء شامل اطلاعاتی در مورد هر وقوع تطابق در str باشد."
    },
    "$replace": {
        "آرگومان‌ها": "str, pattern, replacement [, limit]",
        "توضیحات": "تطابق‌های وقوع pattern در str را پیدا کرده و آنها را با replacement جایگزین می‌کند. پارامتر اختیاری limit حداکثر تعداد جایگزینی‌ها را مشخص می‌کند."
    },
    "$now": {
        "آرگومان‌ها": "$[picture [, timezone]]",
        "توضیحات": "یک برچسب زمانی به فرمت سازگار با ISO 8601 تولید کرده و آن را به عنوان یک رشته برمی‌گرداند. اگر پارامترهای اختیاری picture و timezone تامین شوند، آنگاه برچسب زمانی کنونی به عنوان توصیف شده توسط تابع $fromMillis() فرمت می‌شود."
    },
    "$base64encode": {
        "آرگومان‌ها": "string",
        "توضیحات": "یک رشته ASCII را به نمایش مبنای 64 تبدیل می‌کند. هر کاراکتر در رشته به عنوان یک بایت از داده‌های دودویی مورد توجه قرار می‌گیرد. این اقتضا که تمام کاراکترها در محدوده 0x00 تا 0xFF باشند، که شامل تمام کاراکترهای رشته‌های کدگذاری شده URI می‌شود. کاراکترهای یونیکد خارج از آن محدوده پشتیبانی نمی‌شوند."
    },
    "$base64decode": {
        "آرگومان‌ها": "string",
        "توضیحات": "بایت‌های رمزگذاری شده به نمایش مبنای 64 را به یک رشته تبدیل می‌کند با استفاده از یک صفحه کد یونیکد UTF-8."
    },
    "$number": {
        "آرگومان‌ها": "arg",
        "توضیحات": "پارامتر arg را با استفاده از قوانین تبدیل زیر به یک عدد تبدیل می‌کند:\n\n - اعداد بدون تغییر باقی می‌مانند\n - رشته‌هایی که دارای دنباله کاراکترهایی هستند که نمایانگر یک عدد JSON معتبر هستند، به آن عدد تبدیل می‌شوند\n - سایر مقادیر باعث ایجاد یک خطا می‌شوند."
    },
    "$abs": {
        "آرگومان‌ها": "number",
        "توضیحات": "مقدار مطلق پارامتر number را برمی‌گرداند."
    },
    "$floor": {
        "آرگومان‌ها": "number",
        "توضیحات": "مقدار number را به پایینترین عدد صحیح کوچکتر یا مساوی با number گرد می‌کند."
    },
    "$ceil": {
        "آرگومان‌ها": "number",
        "توضیحات": "مقدار number را به بالاترین عدد صحیح بزرگتر یا مساوی با number گرد می‌کند."
    },
    "$round": {
        "آرگومان‌ها": "number [, precision]",
        "توضیحات": "مقدار پارامتر number را به تعداد مکان اعشار مشخص شده توسط پارامتر اختیاری precision گرد می‌کند."
    },
    "$power": {
        "آرگومان‌ها": "base, exponent",
        "توضیحات": "مقدار base را به توان exponent می‌برد."
    },
    "$sqrt": {
        "آرگومان‌ها": "number",
        "توضیحات": "مربع‌ریشه مقدار پارامتر number را برمی‌گرداند."
    },
    "$random": {
        "آرگومان‌ها": "",
        "توضیحات": "یک عدد تصادفی شبه‌تصادفی بزرگتر یا مساوی با صفر و کمتر از یک را برمی‌گرداند."
    },
    "$millis": {
        "آرگومان‌ها": "",
        "توضیحات": "تعداد میلی‌ثانیه‌های گذشته از زمان Unix Epoch (1 ژانویه 1970 UTC) به عنوان یک عدد را برمی‌گرداند. تمام فراخوانی‌های $millis() در یک ارزیابی عبارت تنها یک مقدار را برمی‌گردانند."
    },
    "$sum": {
        "آرگومان‌ها": "array",
        "توضیحات": "جمع حسابی یک array از اعداد را برمی‌گرداند. اگر ورودی array شامل موردی باشد که یک عدد نباشد، این یک خطاست."
    },
    "$max": {
        "آرگومان‌ها": "array",
        "توضیحات": "بیشینه‌ی عدد در یک array از اعداد را برمی‌گرداند. اگر ورودی array شامل موردی باشد که یک عدد نباشد، این یک خطاست."
    },
    "$min": {
        "args": "آرایه",
        "desc": "کمترین عدد در یک `آرایه` از اعداد را برمی‌گرداند. اگر `آرایه` ورودی حاوی موردی باشد که عدد نباشد، خطایی ایجاد می‌شود."
    },
    "$average": {
        "args": "آرایه",
        "desc": "مقدار میانگین یک `آرایه` از اعداد را برمی‌گرداند. اگر `آرایه` ورودی حاوی موردی باشد که عدد نباشد، خطایی ایجاد می‌شود."
    },
    "$boolean": {
        "args": "آرگومان",
        "desc": "آرگومان را به یک مقدار بولی تبدیل می‌کند با استفاده از قوانین زیر:\n\n - `Boolean`: بدون تغییر\n - `رشته`: خالی: `false`\n - `رشته`: غیر خالی: `true`\n - `عدد`: `0`: `false`\n - `عدد`: غیر صفر: `true`\n - `null`: `false`\n - `آرایه`: خالی: `false`\n - `آرایه`: حاوی عضوی که به `true` تبدیل می‌شود: `true`\n - `آرایه`: تمامی اعضا به `false` تبدیل می‌شوند: `false`\n - `شیء`: خالی: `false`\n - `شیء`: غیر خالی: `true`\n - `تابع`: `false`"
    },
    "$not": {
        "args": "آرگومان",
        "desc": "مقدار بولی NOT بر روی آرگومان را برمی‌گرداند. ابتدا `آرگومان` به یک مقدار بولی تبدیل می‌شود."
    },
    "$exists": {
        "args": "آرگومان",
        "desc": "اگر عبارت `آرگومان` به یک مقدار ارزیابی شود، مقدار بولی `true` را برمی‌گرداند و اگر عبارت مطابقتی نداشته باشد (مثلاً مسیری به ارجاع میدهد که فیلدی موجود نیست)، `false` را برمی‌گرداند."
    },
    "$count": {
        "args": "آرایه",
        "desc": "تعداد موارد در آرایه را برمی‌گرداند."
    },
    "$append": {
        "args": "آرایه1, آرایه2",
        "desc": "دو آرایه را به یکدیگر می‌چسباند."
    },
    "$sort": {
        "args": "آرایه [, تابع]",
        "desc": "یک آرایه حاوی تمام مقادیر در پارامتر `آرایه` را برمی‌گرداند، اما به ترتیب مرتب می‌کند.\n\nاگر تابع مقایسه‌گر تعیین شود، باید یک تابع با دو پارامتر باشد:\n\n`تابع(چپ، راست)`\n\nاین تابع توسط الگوریتم مرتب‌سازی فراخوانی می‌شود تا دو مقدار `چپ` و `راست` را مقایسه کند. اگر مقدار `چپ` باید بعد از مقدار `راست` در ترتیب مورد نظر قرار گیرد، تابع باید بولین `true` را برگرداند تا جابه‌جایی را نشان دهد. در غیر این صورت باید `false` برگرداند."
    },
    "$reverse": {
        "args": "آرایه",
        "desc": "یک آرایه حاوی تمام مقادیر از پارامتر `آرایه` را با ترتیب معکوس برمی‌گرداند."
    },
    "$shuffle": {
        "args": "آرایه",
        "desc": "یک آرایه حاوی تمام مقادیر از پارامتر `آرایه` را به ترتیب تصادفی مخلوط می‌کند."
    },
    "$zip": {
        "args": "آرایه, ...",
        "desc": "یک آرایه تعاملی (زیپ) حاوی آرایه‌های گروهی از مقادیر از آرگومان‌های `آرایه1` ... `آرایهN` از اندیس 0، 1، 2 و ... برمی‌گرداند."
    },
    "$keys": {
        "args": "شیء",
        "desc": "یک آرایه حاوی کلیدهای شیء را برمی‌گرداند. اگر آرگومان یک آرایه از اشیاء باشد، آرایه برگردانده شده حاوی یک لیست غیرتکراری از تمام کلیدهای تمام اشیاء در آرایه ورودی خواهد بود."
    },
    "$lookup": {
        "args": "شیء, کلید",
        "desc": "مقدار مرتبط با کلید در شیء را برمی‌گرداند. اگر آرگومان اول یک آرایه از اشیاء باشد، تمام اشیاء در آرایه جستجو می‌شوند و مقادیر مرتبط با تمام موارد کلید برگردانده می‌شوند."
    },
    "$spread": {
        "args": "شیء",
        "desc": "یک شیء حاوی جفت‌های کلید/مقدار را به یک آرایه از اشیاء تقسیم می‌کند، هر کدام از این اشیاء دارای یک کلید/مقدار تکی از شیء ورودی هستند. اگر پارامتر یک آرایه از اشیاء باشد، آرایه حاوی یک شیء برای هر کلید/مقدار در هر شیء از آرایه ورودی خواهد بود."
    },
    "$merge": {
        "args": "آرایه<شیء>",
        "desc": "یک آرایه از اشیاء را به یک شیء واحد حاوی تمام جفت‌های کلید/مقدار از هر یک از اشیاء در آرایه ورودی ادغام می‌کند. اگر هر یک از اشیاء ورودی شامل همان کلید باشند، شیء بازگشتی مقدار آخرین کلید مشترک را خواهد داشت. در صورتی که آرایه ورودی شیء نباشد، خطایی ایجاد می‌شود."
    },
    "$sift": {
        "args": "شیء, تابع",
        "desc": "یک شیء حاوی تنها جفت‌های کلید/مقدار از پارامتر `شیء` را برمی‌گرداند که شرط تابع پیش‌فرض `تابع` در دومین `تابع` تعیین شده را برآورده کند.\n\n`تابع` که به عنوان پارامتر دوم تعیین می‌شود باید امضای زیر را داشته باشد:\n\n`تابع(مقدار [, کلید [, شیء]])`"
    },
    "$each": {
        "args": "شیء, تابع",
        "desc": "یک آرایه حاوی مقادیری را برمی‌گرداند که توسط `تابع` به هر جفت کلید/مقدار در `شیء` اعمال شده است."
    },
    "$map": {
        "args": "آرایه, تابع",
        "desc": "یک آرایه حاوی نتایج اعمال `تابع` به هر مقدار در پارامتر `آرایه` را برمی‌گرداند.\n\n`تابع` که به عنوان پارامتر دوم تعیین می‌شود باید امضای زیر را داشته باشد:\n\n`تابع(مقدار [, اندیس [, آرایه]])`"
    },
    "$filter": {
        "args": "آرایه, تابع",
        "desc": "یک آرایه حاوی تنها مقادیر در پارامتر `آرایه` را برمی‌گرداند که شرط تابع `تابع` را برآورده کند.\n\n`تابع` که به عنوان پارامتر دوم تعیین می‌شود باید امضای زیر را داشته باشد:\n\n`تابع(مقدار [, اندیس [, آرایه]])`"
    },
    "$reduce": {
        "args": "آرایه, تابع [, مقدارابتدایی]",
        "desc": "یک مقدار تجمعی حاصل از اعمال متوالی پارامتر `تابع` به هر مقدار در `آرایه` به همراه نتیجه قبلی اعمال تابع برمی‌گرداند.\n\nتابع باید دو آرگومان را قبول کرده و مانند یک عملگر درونی بین هر مقدار در `آرایه` عمل کند. امضای تابع باید به صورت زیر باشد: `myfunc($accumulator, $value[, $index[, $array]])`\n\nپارامتر اختیاری `مقدارابتدایی` به عنوان مقدار اولیه در تجمع استفاده می‌شود."
    },
    "$flowContext": {
        "args": "رشته[, رشته]",
        "desc": "ویژگی متغیر رشته‌ای از متغیرهای کانتکست جریان را بازیابی می‌کند.\n\nاین یک تابع تعریف شده توسط Node-RED است."
    },
    "$globalContext": {
        "args": "رشته[, رشته]",
        "desc": "ویژگی متغیر رشته‌ای از متغیرهای کانتکست سراسری را بازیابی می‌کند.\n\nاین یک تابع تعریف شده توسط Node-RED است."
    },
    "$pad": {
        "args": "رشته, عرض [, کاراکتر]",
        "desc": "یک نسخه از `رشته` با اضافه کردن فضاهای اضافی (اگر لازم باشد) به طوری که تعداد کل حروف آن حداقل مقدار مطلق پارامتر `عرض` باشد را برمی‌گرداند.\n\nاگر `عرض` یک عدد مثبت باشد، رشته به سمت راست پر می‌شود؛ اگر منفی باشد، رشته به سمت چپ پر می‌شود.\n\nپارامتر اختیاری `کاراکتر` نمادهای پر کردن (کاراکتر‌ها) را مشخص می‌کند. اگر مشخص نشود، به صورت پیش‌فرض به فضا پر می‌شود."
    },
    "$fromMillis": {
        "args": "عدد, [, الگو [, منطقه‌زمانی]]",
        "desc": "عددی که میلی‌ثانیه‌های گذشته از زمان Epoch Unix (1 ژانویه 1970 UTC) را نمایش می‌دهد، به عنوان یک رشته قالب‌بندی شده نمایش می‌دهد، به طور مشخص شده توسط رشته `الگو`.\n\nاگر پارامتر اختیاری `الگو` حذف شود، زمان به شکل فرمت ISO 8601 قالب‌بندی می‌شود.\n\nاگر پارامتر اختیاری `الگو` مشخص شود، زمان به تطابق با نمایش مشخص شده در آن رشته قالب‌بندی می‌شود. رفتار این تابع با نسخه دو پارامتری تابع `format-dateTime` در مشخصه XPath F&O 3.1 همخوانی دارد. پارامتر رشته `الگو` نحوه قالب‌بندی زمان را مشخص می‌کند و دارای دستورالعمل‌های همانند `format-dateTime` است.\n\nاگر پارامتر اختیاری `منطقه‌زمانی` مشخص شود، زمان قالب‌بندی شده در آن منطقه‌زمانی خواهد بود. رشته منطقه‌زمانی باید به فرمت '±HHMM' باشد، که ± علامت بالا یا پایین است و HHMM آفست در ساعت و دقیقه از UTC است. آفست مثبت برای مناطق‌زمانی شرقی از UTC و آفست منفی برای مناطق‌زمانی غربی از UTC است."
    },
    "$formatNumber": {
        "args": "عدد, الگو [, گزینه‌ها]",
        "desc": "عدد را به یک رشته تبدیل می‌کند و آن را به عنوان یک نمایش عددی با فرمت مشخص شده در رشته `الگو` قالب‌بندی می‌کند.\n\nرفتار این تابع با تابع `fn:format-number` در مشخصه XPath F&O 3.1 همخوانی دارد. پارامتر رشته `الگو` نحوه قالب‌بندی عدد را مشخص می‌کند و دارای دستورالعمل‌های همانند `fn:format-number` است.\n\nپارامتر اختیاری سوم `گزینه‌ها` برای تغییر نمادهای قالب‌بندی محلی به عنوان جایگزین برای نمادهای پیش‌فرض محلی مانند جداکننده اعشار استفاده می‌شود. اگر ارائه شود، باید یک شیء JSON با کلیدهای مشخصه‌های مورد نظر باشد.\n\nبرای نمونه:\n\n```json\n{\n  \"decimal-separator\": \",\",\n  \"grouping-separator\": \".\"\n}\n```"
    },
    "$parseJson": {
        "args": "رشته",
        "desc": "یک رشته را به عنوان یک مقدار JSON معتبر می‌پذیرد و مقدار متناظر با آن را برمی‌گرداند. اگر رشته ورودی صحیح نباشد، یک خطا ایجاد می‌شود."
    },
    "$eval": {
        "args": "رشته, آرگومانها",
        "desc": "یک بیانیه JavaScript را اجرا می‌کند که در رشته `رشته` مشخص شده است. این تابع از آرگومانها برای پاس دادن به برنامه اجراشده استفاده می‌کند."
    },
    "$info": {
        "args": "هیچ",
        "desc": "یک مقدار جزئیات اطلاعات تکمیلی مربوط به گره ورودی فعلی را برمی‌گرداند. این تابع به طور خودکار توسط Node-RED تعریف شده است."
    }
}
